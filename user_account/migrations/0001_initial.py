# Generated by Django 5.1.4 on 2024-12-23 08:11

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text="Defines the user's account classification", max_length=50, unique=True, verbose_name='Account Type')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Account Type Description')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': '',
                'verbose_name_plural': '',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(help_text='A valid email address for communication', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('username', models.CharField(max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(3), django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. Use letters, numbers, and @/./+/-/_ only.')])),
                ('first_name', models.CharField(blank=True, max_length=50, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=50, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='last name')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Enter a valid international phone number.')], verbose_name='phone')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates administrative access.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates active user status.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_login_attempt', models.DateTimeField(blank=True, null=True)),
                ('login_attempts', models.IntegerField(default=0)),
                ('is_locked_out', models.BooleanField(default=False)),
                ('locked_out_until', models.DateTimeField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, max_length=255, null=True, upload_to='profile_pictures/%Y/%m/')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='biography')),
                ('failed_attempts', models.JSONField(blank=True, default=list, null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission')),
                ('account_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='user_account.accounttype')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
        ),
    ]
